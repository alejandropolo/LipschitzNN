Timer unit: 1e-09 s

Total time: 107.922 s
File: /Users/alejandropolo/Library/CloudStorage/OneDrive-UniversidadPontificiaComillas/Escritorio/PhD/Codigo/LipschitzNN/Scripts/utilities_voronoi.py
Function: add_points_to_voronoi at line 576

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   576                                           def add_points_to_voronoi(original_vor, original_points, finite_vor, radius_tot, vertices, distances, 
   577                                                                     model,actfunc, global_lipschitz_constant, x_lim, y_lim,monotone_relations,variable_index,
   578                                                                     n_variables,mode='neuralsens',plot_voronoi=False, epsilon=1e-5, max_iterations=10):
   579                                               """
   580                                               Add points to a Voronoi diagram using the furthest vertex for each point.
   581                                           
   582                                               Args:
   583                                                   original_vor (scipy.spatial.Voronoi): The original Voronoi diagram.
   584                                                   original_points (numpy.ndarray): The original points in the Voronoi diagram.
   585                                                   finite_vor (scipy.spatial.Voronoi): The finite Voronoi diagram (with the added symmetric points)
   586                                                   radius_tot (numpy.ndarray): The radii for each point in the Voronoi diagram.
   587                                                   vertices (numpy.ndarray): The vertices defining the hypercube.
   588                                                   distances (dict): The distances for each point in the Voronoi diagram.
   589                                                   model (torch.nn.Module): The trained model.
   590                                                   global_lipschitz_constant (float): The global Lipschitz constant.
   591                                                   x_lim (tuple): The x-axis limits of the hypercube.
   592                                                   y_lim (tuple): The y-axis limits of the hypercube.
   593                                                   monotone_relations (list): The monotone relations for each variable.
   594                                                   variable_index (list): The indices of the variables to compute the local Lipschitz constant.
   595                                                   n_variables (int): The number of variables.
   596                                                   plot_voronoi (bool, optional): Whether to plot each Voronoi diagram. Defaults to False.
   597                                                   epsilon (float, optional): The extension of the hypercube. Defaults to 1e-5. It is needed to compute symmetric points on the boundary.
   598                                                   max_iterations (int, optional): The maximum number of iterations. Defaults to 10.
   599                                           
   600                                               Returns:
   601                                                   numpy.ndarray: The updated original points in the Voronoi diagram.
   602                                               """
   603                                               ##################################################    ADAPTAR PARA N DIMENSIONES 
   604                                               ## Define the coordinates of the square's vertices
   605         1      18000.0  18000.0      0.0      square_vertices = np.array([[x_lim[0], y_lim[0]], [x_lim[0], y_lim[1]], [x_lim[1], y_lim[1]], [x_lim[1], y_lim[0]], [x_lim[0], y_lim[0]]])
   606                                           
   607                                               ## Generate vertices for a hypercube (n-dimensional cube) defined by the given interval with the given extension
   608         1       3000.0   3000.0      0.0      intervals_extended = [(x_lim[0] - epsilon, x_lim[1] + epsilon), (y_lim[0] - epsilon, y_lim[1] + epsilon)]
   609         1       9000.0   9000.0      0.0      vertices_extended = generate_hypercube_vertices(intervals_extended)
   610                                           
   611                                               ## Boolean warning to print if there are points not following the monotone relation
   612         1          0.0      0.0      0.0      warning = False
   613                                               
   614         1          0.0      0.0      0.0      if mode == 'neuralsens':
   615         1     228000.0 228000.0      0.0          print('Using NeuralSens')
   616         1     458000.0 458000.0      0.0          weights, biases = get_weights_and_biases(model)
   617                                               elif mode == 'autograd':
   618                                                   print('Using autograd')
   619                                               else:
   620                                                   raise ValueError('The mode must be either autograd or neuralsens')
   621                                           
   622       603     466000.0    772.8      0.0      for i in range(max_iterations):
   623                                                   ## Add new point
   624                                                   #selected_vertex = add_new_point(finite_vor, vertices, distances, radius_tot)
   625       603        2e+10    4e+07     19.7          selected_vertex = add_new_point_vectorized(finite_vor, vertices, distances, radius_tot)
   626                                                   ## Project the new point to the hypercube (because of the extension it may be outside the hypercube)
   627       603   22124000.0  36689.9      0.0          selected_vertex = proyection_hypercube(selected_vertex, vertices)
   628                                                   ## Add the new point to the original points
   629       603   14439000.0  23945.3      0.0          original_points = np.vstack((original_points, selected_vertex))
   630                                                   ## Add the new point to the inputs
   631       603   27832000.0  46155.9      0.0          inputs = torch.tensor(original_points, dtype=torch.float)
   632                                                   
   633                                                   ## Add the new point to the Voronoi diagram
   634       603 1085748000.0    2e+06      1.0          original_vor.add_points(selected_vertex.reshape(1, -1))
   635                                                   ## Compute the new finite Voronoi diagram with the new point
   636                                                   ##MODIFICACIÓN PARA NO TENER QUE RECALCULAR EL VORONOI
   637       603        2e+10    3e+07     18.8          all_points, _ = add_symmetric_points(original_vor, vertices_extended, intervals_extended)
   638       603 3526967000.0    6e+06      3.3          finite_vor = Voronoi(all_points, incremental=True)
   639                                                   
   640       603     445000.0    738.0      0.0          """ ## Para intentar evitar recalcular
   641                                                   all_points, symmetric_points = add_symmetric_points(original_vor, vertices_extended, intervals_extended)
   642                                                   ### Check if symmetric points is not an empty array:
   643                                                   print(symmetric_points)
   644                                                   if symmetric_points.shape[0]!=0:        
   645                                                       finite_vor.add_points(np.array(symmetric_points))"""
   646                                           
   647                                                   ## Compute the new radios for each point
   648       603     752000.0   1247.1      0.0          if mode=='autograd':
   649                                                       radius_tot, dict_radios, x_reentrenamiento = get_lipschitz_radius(inputs=inputs, model=model, global_lipschitz_constant=global_lipschitz_constant, 
   650                                                                                                                       monotone_relation=monotone_relations, variable_index=variable_index, n_variables=n_variables)
   651       603     275000.0    456.1      0.0          elif mode=='neuralsens':
   652      1206        2e+10    2e+07     18.2              radius_tot, dict_radios, x_reentrenamiento = get_lipschitz_radius_neuralsens(inputs=inputs, outputs=[], weights=weights, biases=biases, actfunc=actfunc, 
   653       603     258000.0    427.9      0.0                                                                                          global_lipschitz_constant=global_lipschitz_constant, 
   654       603     231000.0    383.1      0.0                                                                                          monotone_relation=monotone_relations, variable_index=variable_index, 
   655       603     145000.0    240.5      0.0                                                                                          n_variables=n_variables)
   656                                           
   657       603   43671000.0  72422.9      0.0          derivative_sign = [v[1] for _, v in dict_radios.items()]
   658                                                   ## Plot Voronoi diagram
   659       603     361000.0    598.7      0.0          if plot_voronoi:
   660                                                       plot_finite_voronoi_2D(vor=finite_vor, all_points=all_points, original_points=original_points, radios=radius_tot, boundary=square_vertices, derivative_sign=derivative_sign, plot_symmetric_points=False)
   661                                                   ## Check if the space is filled
   662       603     497000.0    824.2      0.0          i += 1 ############# CREO QUE DEBERÍA QUITARLO
   663       603        4e+10    6e+07     35.0          space_filled, distances = check_space_filled(finite_vor, radius_tot, vertices)
   664                                                   ## Check if the space is filled and if x_reentrenamiento is empty
   665       603     427000.0    708.1      0.0          if space_filled and x_reentrenamiento.shape[0]==0:
   666         1     144000.0 144000.0      0.0              print('The space is filled: {} after {} iterations '.format(space_filled,i))
   667         1          0.0      0.0      0.0              break
   668       602    3477000.0   5775.7      0.0          elif x_reentrenamiento.shape[0]!=0 and not warning:
   669                                                       print('The retraining set is not empty and therefore the space cannot be filled: {} points'.format(x_reentrenamiento.shape[0]))
   670                                                       warning = True
   671                                           
   672         1 4195974000.0    4e+09      3.9      plot_finite_voronoi_2D(vor=finite_vor, all_points=all_points, original_points=original_points, radios=radius_tot, boundary=square_vertices, derivative_sign=derivative_sign, plot_symmetric_points=False)